// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

/*
Package goChat is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	ChatMessage
	InviteRequest
	InviteResponse
*/
package goChat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatMessage struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Register bool   `protobuf:"varint,4,opt,name=register" json:"register,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChatMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ChatMessage) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatMessage) GetRegister() bool {
	if m != nil {
		return m.Register
	}
	return false
}

type InviteRequest struct {
	Requester string   `protobuf:"bytes,1,opt,name=requester" json:"requester,omitempty"`
	Clients   []string `protobuf:"bytes,2,rep,name=clients" json:"clients,omitempty"`
}

func (m *InviteRequest) Reset()                    { *m = InviteRequest{} }
func (m *InviteRequest) String() string            { return proto.CompactTextString(m) }
func (*InviteRequest) ProtoMessage()               {}
func (*InviteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InviteRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *InviteRequest) GetClients() []string {
	if m != nil {
		return m.Clients
	}
	return nil
}

type InviteResponse struct {
	Response bool `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
}

func (m *InviteResponse) Reset()                    { *m = InviteResponse{} }
func (m *InviteResponse) String() string            { return proto.CompactTextString(m) }
func (*InviteResponse) ProtoMessage()               {}
func (*InviteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InviteResponse) GetResponse() bool {
	if m != nil {
		return m.Response
	}
	return false
}

func init() {
	proto.RegisterType((*ChatMessage)(nil), "goChat.ChatMessage")
	proto.RegisterType((*InviteRequest)(nil), "goChat.InviteRequest")
	proto.RegisterType((*InviteResponse)(nil), "goChat.InviteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error)
	EstablishConnection(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/goChat.Chat/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRouteChatClient{stream}
	return x, nil
}

type Chat_RouteChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatRouteChatClient struct {
	grpc.ClientStream
}

func (x *chatRouteChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRouteChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) EstablishConnection(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := grpc.Invoke(ctx, "/goChat.Chat/EstablishConnection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	RouteChat(Chat_RouteChatServer) error
	EstablishConnection(context.Context, *InviteRequest) (*InviteResponse, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).RouteChat(&chatRouteChatServer{stream})
}

type Chat_RouteChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatRouteChatServer struct {
	grpc.ServerStream
}

func (x *chatRouteChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRouteChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_EstablishConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).EstablishConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/EstablishConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).EstablishConnection(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstablishConnection",
			Handler:    _Chat_EstablishConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _Chat_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0xb6, 0x2a, 0xcd, 0x21, 0x3a, 0xb8, 0xa2, 0xb2, 0x22, 0x86, 0xc8, 0x53, 0x06,
	0x14, 0x21, 0x18, 0x19, 0x2b, 0x40, 0x0c, 0x2c, 0x79, 0x83, 0x34, 0x9c, 0x52, 0x4b, 0xc5, 0x2e,
	0xbe, 0x6b, 0x78, 0x08, 0x5e, 0x1a, 0xc5, 0x4e, 0xc2, 0x1f, 0x31, 0xe5, 0x7e, 0xdf, 0xe9, 0xbb,
	0x2f, 0x77, 0x86, 0x15, 0xa1, 0x6f, 0x4d, 0x8d, 0x54, 0x1c, 0xbd, 0x63, 0x27, 0x17, 0x8d, 0xdb,
	0xee, 0x2b, 0xd6, 0x1f, 0x70, 0xde, 0x7d, 0x5f, 0x90, 0xa8, 0x6a, 0x50, 0x6e, 0x60, 0x41, 0x68,
	0x5f, 0xd1, 0x2b, 0x91, 0x89, 0x3c, 0x29, 0x7b, 0x92, 0x29, 0x2c, 0x3d, 0xd6, 0x68, 0x5a, 0xf4,
	0x6a, 0x1a, 0x3a, 0x23, 0x4b, 0x05, 0x67, 0x6f, 0xd1, 0xae, 0x66, 0xa1, 0x35, 0x60, 0x74, 0x35,
	0x86, 0x18, 0xbd, 0x9a, 0x67, 0x22, 0x5f, 0x96, 0x23, 0xeb, 0x27, 0xb8, 0x78, 0xb6, 0xad, 0x61,
	0x2c, 0xf1, 0xfd, 0x84, 0xc4, 0xf2, 0x0a, 0x12, 0x1f, 0xcb, 0x31, 0xfd, 0x5b, 0xe8, 0x42, 0xea,
	0x83, 0x41, 0xcb, 0xa4, 0xa6, 0xd9, 0xac, 0x0b, 0xe9, 0x51, 0x5f, 0xc3, 0x6a, 0x18, 0x44, 0x47,
	0x67, 0xa9, 0x8f, 0x8d, 0x75, 0x18, 0x14, 0x62, 0x23, 0xdf, 0x7e, 0x0a, 0x98, 0x77, 0x0b, 0xcb,
	0x7b, 0x48, 0x4a, 0x77, 0x62, 0x0c, 0xb0, 0x2e, 0xe2, 0x39, 0x8a, 0x1f, 0xb7, 0x48, 0xff, 0x13,
	0xf5, 0x24, 0x17, 0x37, 0x42, 0x3e, 0xc2, 0xfa, 0x81, 0xb8, 0xda, 0x1d, 0x0c, 0xed, 0xb7, 0xce,
	0x5a, 0xac, 0xd9, 0x38, 0x2b, 0x2f, 0x07, 0xc7, 0xaf, 0xcd, 0xd2, 0xcd, 0x5f, 0x39, 0xfe, 0x8b,
	0x9e, 0xec, 0x16, 0xe1, 0x31, 0xee, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xb8, 0x88, 0x8f,
	0x9e, 0x01, 0x00, 0x00,
}
