// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

/*
Package goChat is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	List
	Response
	ClientInfo
	RegistrationReply
	ClientList
	RouteMessage
*/
package goChat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type List struct {
}

func (m *List) Reset()                    { *m = List{} }
func (m *List) String() string            { return proto.CompactTextString(m) }
func (*List) ProtoMessage()               {}
func (*List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ClientInfo struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ClientInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type RegistrationReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *RegistrationReply) Reset()                    { *m = RegistrationReply{} }
func (m *RegistrationReply) String() string            { return proto.CompactTextString(m) }
func (*RegistrationReply) ProtoMessage()               {}
func (*RegistrationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegistrationReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type ClientList struct {
	Ip   []string `protobuf:"bytes,1,rep,name=ip" json:"ip,omitempty"`
	Port []int32  `protobuf:"varint,2,rep,packed,name=port" json:"port,omitempty"`
}

func (m *ClientList) Reset()                    { *m = ClientList{} }
func (m *ClientList) String() string            { return proto.CompactTextString(m) }
func (*ClientList) ProtoMessage()               {}
func (*ClientList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ClientList) GetIp() []string {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *ClientList) GetPort() []int32 {
	if m != nil {
		return m.Port
	}
	return nil
}

type RouteMessage struct {
	Ip      string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RouteMessage) Reset()                    { *m = RouteMessage{} }
func (m *RouteMessage) String() string            { return proto.CompactTextString(m) }
func (*RouteMessage) ProtoMessage()               {}
func (*RouteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RouteMessage) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RouteMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*List)(nil), "goChat.List")
	proto.RegisterType((*Response)(nil), "goChat.Response")
	proto.RegisterType((*ClientInfo)(nil), "goChat.ClientInfo")
	proto.RegisterType((*RegistrationReply)(nil), "goChat.RegistrationReply")
	proto.RegisterType((*ClientList)(nil), "goChat.ClientList")
	proto.RegisterType((*RouteMessage)(nil), "goChat.RouteMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	// Registers the client with the server.
	RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Response, error)
	// Unregisters the client with the server.
	UnRegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Response, error)
	// Gets the list of clients from the server.
	GetClientList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ClientList, error)
	// Routes the chat messages from client to client.
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/goChat.Chat/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UnRegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/goChat.Chat/UnRegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetClientList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := grpc.Invoke(ctx, "/goChat.Chat/GetClientList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/goChat.Chat/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRouteChatClient{stream}
	return x, nil
}

type Chat_RouteChatClient interface {
	Send(*RouteMessage) error
	Recv() (*RouteMessage, error)
	grpc.ClientStream
}

type chatRouteChatClient struct {
	grpc.ClientStream
}

func (x *chatRouteChatClient) Send(m *RouteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRouteChatClient) Recv() (*RouteMessage, error) {
	m := new(RouteMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	// Registers the client with the server.
	RegisterClient(context.Context, *ClientInfo) (*Response, error)
	// Unregisters the client with the server.
	UnRegisterClient(context.Context, *ClientInfo) (*Response, error)
	// Gets the list of clients from the server.
	GetClientList(context.Context, *List) (*ClientList, error)
	// Routes the chat messages from client to client.
	RouteChat(Chat_RouteChatServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UnRegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UnRegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/UnRegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UnRegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goChat.Chat/GetClientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetClientList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).RouteChat(&chatRouteChatServer{stream})
}

type Chat_RouteChatServer interface {
	Send(*RouteMessage) error
	Recv() (*RouteMessage, error)
	grpc.ServerStream
}

type chatRouteChatServer struct {
	grpc.ServerStream
}

func (x *chatRouteChatServer) Send(m *RouteMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRouteChatServer) Recv() (*RouteMessage, error) {
	m := new(RouteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _Chat_RegisterClient_Handler,
		},
		{
			MethodName: "UnRegisterClient",
			Handler:    _Chat_UnRegisterClient_Handler,
		},
		{
			MethodName: "GetClientList",
			Handler:    _Chat_GetClientList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _Chat_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x69, 0x8c, 0xcd, 0x50, 0x43, 0x1d, 0x3c, 0x84, 0x9c, 0x4a, 0x4e, 0x39, 0xc5,
	0x62, 0x2f, 0x45, 0xf0, 0xd4, 0x83, 0x08, 0x7a, 0x59, 0xf0, 0x01, 0xa2, 0x8c, 0x71, 0xa1, 0xee,
	0x2e, 0xbb, 0xab, 0xe0, 0x5b, 0xfb, 0x08, 0x92, 0x4d, 0xb3, 0x2d, 0xd6, 0x53, 0x6f, 0x99, 0xc9,
	0xce, 0x7c, 0xff, 0xff, 0x0f, 0xe4, 0x96, 0xcc, 0x97, 0x78, 0x25, 0xdb, 0x68, 0xa3, 0x9c, 0xc2,
	0xb4, 0x53, 0x9b, 0xf7, 0xd6, 0x55, 0x29, 0x24, 0x8f, 0xc2, 0xba, 0x0a, 0x60, 0xca, 0xc9, 0x6a,
	0x25, 0x2d, 0x55, 0x4b, 0x80, 0xcd, 0x56, 0x90, 0x74, 0x0f, 0xf2, 0x4d, 0x61, 0x0e, 0xb1, 0xd0,
	0x05, 0x5b, 0xb0, 0x3a, 0xe3, 0xb1, 0xd0, 0x88, 0x90, 0x68, 0x65, 0x5c, 0x11, 0x2f, 0x58, 0x7d,
	0xc6, 0xfd, 0x77, 0x75, 0x0d, 0x97, 0x9c, 0x3a, 0x61, 0x9d, 0x69, 0x9d, 0x50, 0x92, 0x93, 0xde,
	0x7e, 0x63, 0x09, 0x53, 0xb3, 0x5b, 0xb9, 0x1b, 0x0f, 0xf5, 0x1e, 0xd1, 0xc3, 0x03, 0x62, 0x72,
	0x84, 0x98, 0x04, 0xc4, 0x1a, 0x66, 0x5c, 0x7d, 0x3a, 0x7a, 0x22, 0x6b, 0xdb, 0x8e, 0x8e, 0x64,
	0x15, 0x70, 0xfe, 0x31, 0xfc, 0xf2, 0xca, 0x32, 0x3e, 0x96, 0x37, 0x3f, 0x0c, 0x92, 0xde, 0x2b,
	0xae, 0x21, 0x1f, 0x54, 0x92, 0x19, 0xe0, 0x88, 0xcd, 0x10, 0x43, 0xb3, 0xf7, 0x5b, 0xce, 0xc7,
	0x5e, 0xc8, 0x23, 0xc2, 0x5b, 0x98, 0x3f, 0xcb, 0x13, 0x67, 0x57, 0x70, 0x71, 0x4f, 0xee, 0xc0,
	0xed, 0x6c, 0x7c, 0xd4, 0x57, 0xe5, 0x9f, 0x35, 0xfe, 0x18, 0x11, 0xde, 0x41, 0xe6, 0xdd, 0x7a,
	0xdd, 0x57, 0x61, 0xeb, 0x41, 0x00, 0xe5, 0xbf, 0xdd, 0x2a, 0xaa, 0xd9, 0x92, 0xbd, 0xa4, 0xfe,
	0xc8, 0xab, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x9d, 0x71, 0x60, 0xf6, 0x01, 0x00, 0x00,
}
